// _mixin.scss

/// Helper to clear inner floats
/// @access public
/// @link http://nicolasgallagher.com/micro-clearfix-hack/ Micro Clearfix
@mixin clearfix {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}

/// Responsive breakpoint manager
/// @access public
/// @param {String} $breakpoint - Breakpoint
/// @requires $breakpoints
@mixin respond-to($breakpoint) {
  $raw-query: map-get($breakpoints, $breakpoint);

  @if $raw-query {
    $query: if(
                    type-of($raw-query) == 'string',
                    unquote($raw-query),
                    inspect($raw-query)
    );

    @media #{$query} {
      @content;
    }
  } @else {
    @error 'No value found for `#{$breakpoint}`. '
         + 'Please make sure it is defined in `$breakpoints` map.';
  }
}

@mixin breakmax($size) {
  @media all and (max-width: $size) {
    @content;
  }
}

/// Helper to size an element
/// @access public
/// @param {Length} $width
/// @param {Length} $height
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

/// Helper to convert font-size to rem with fallback
/// @param {Length} $size - in px
/// @param {Length} $context - in px
/// @requires $font-size-base
@mixin font-size($size, $context: $font-size-base) {
  @if (unitless($size)) {
    $size: $size * 1px;
  }

  font-size: $size; // fallback
  /*$context: strip-unit($context);
  $size: strip-unit($size);*/
  font-size: #{$size / $context}rem;
}

/// Mixin to style inputs placeholders
@mixin placeholder {
  font-family: font('primary');
  font-style: italic;
  color: color('foreground');
}

@mixin input-placeholder {
  ::-webkit-input-placeholder {@content}
  :-moz-placeholder           {@content}
  ::-moz-placeholder          {@content}
  :-ms-input-placeholder      {@content}
}

/// Helper to create better transition
@mixin transition($duration: $transition-duration, $type: cubic-bezier(0.25, 0.46, 0.45, 0.94)) {
  transition: $duration $type;
}

/// Create a grid system
/// @author Alexis Tessier (Agence'O)
/// @access public
/// @param {String} $boxSelector - box selector name
/// @param {Number} $baseWidth
/// @param {Number} $numberOfColumns
/// @param {Number} $gutter
/// @param {Number} $rowGutter
/// @param {String} $gutterProperty - default: 'margin'
/// @return {Mixin}
@mixin grid($boxSelector, $baseWidth, $numberOfColumns, $gutter, $rowGutter: 0, $gutterProperty: 'margin') {
  $numberOfGutter: ($numberOfColumns - 1);
  $availableWidth: $baseWidth - ($numberOfGutter * $gutter);
  $baseColumnWidth: $availableWidth / $numberOfColumns;

  $columnWidth: (($baseColumnWidth / $baseWidth) * 100%);
  $gutterWidth: (($gutter / $baseWidth) * 100%);

  display: block;
  width: ($baseWidth) px;
  max-width: 100%;

  zoom: 1;

  &:before, &:after {
    content: "";
    display: table;
  }

  &:after {
    clear: both;
  }

  #{$boxSelector} {
    display: block;
    float: left;
    width: $columnWidth;
    #{$gutterProperty}-bottom: $rowGutter;

    + #{$boxSelector} {
      #{$gutterProperty}-left: $gutterWidth;
    }

    &:nth-child(#{$numberOfColumns}n+1) {
      #{$gutterProperty}-left: 0;
      clear: both;
    }

    @for $index from 1 through $numberOfColumns {
      &:nth-child(#{$numberOfColumns}n+#{$index}) {
        &:nth-last-child(#{'-n+'}#{($numberOfColumns - $index + 1)}) {
          #{$gutterProperty}-bottom: 0;
        }
      }
    }
  }
}

/// create highlight style
/// @param {Color} $foreground
/// @param {Color} $background
/// @param {Lenght} $padding - default 8px
@mixin highlight($foreground, $background, $padding: 8px) {
  color: $foreground;
  background-color: $background;
  box-shadow: $padding 0 0 $background, ($padding * -1) 0 0 $background;
  box-decoration-break: clone;
}

@mixin center-h($position) {
  position: $position;
  left: 50%;
  transform: translateX(-50%);
}

@mixin center-v($position) {
  position: $position;
  top: 50%;
  transform: translateY(-50%);
}

@mixin center-h-v($position) {
  position: $position;
  top: 50%; left: 50%;
  transform: translate(-50%, -50%);
}

@mixin linear-gradient-x($deg, $start, $end, $opstart, $opend) {
  background-image:
    linear-gradient($deg,
      rgba($start, $opstart) 0%,
      rgba($end, $opend) 100%
    );
}
